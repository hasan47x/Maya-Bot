// ржкрзНрж░рзЯрзЛржЬржирзАрзЯ рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ржЧрзБрж▓рзЛ import ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const admin = require('firebase-admin');

// --- Configuration & Secrets Loading ---
// ржПржЗ ржЕржВрж╢ржЯрж┐ рж╕рж╛рж░рзНржнрж╛рж░ (Zeeploy) ржерзЗржХрзЗ ржЧрзЛржкржи рждржерзНржпржЧрзБрж▓рзЛ рж▓рзЛржб ржХрж░ржмрзЗ

// 1. Firebase Credentials рж▓рзЛржб ржХрж░рж╛
// FIREBASE_CREDENTIALS_JSON ржПржХржЯрж┐ рж╕рзНржЯрзНрж░рж┐ржВ, ржПржЯрж┐ржХрзЗ JSON ржЕржмржЬрзЗржХрзНржЯрзЗ ржкрж░рж┐ржгржд ржХрж░рждрзЗ рж╣ржмрзЗ
const firebaseCredsJsonStr = process.env.FIREBASE_CREDENTIALS_JSON;
if (!firebaseCredsJsonStr) {
  throw new Error("FIREBASE_CREDENTIALS_JSON environment variable is not set.");
}
const serviceAccount = JSON.parse(firebaseCredsJsonStr);

// 2. ржЕржирзНржпрж╛ржирзНржп ржЯрзЛржХрзЗржи ржПржмржВ URL рж▓рзЛржб ржХрж░рж╛
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const FIREBASE_DATABASE_URL = process.env.FIREBASE_DATABASE_URL;

// ржХрзЛржирзЛ ржЯрзЛржХрзЗржи ржирж╛ ржерж╛ржХрж▓рзЗ ржмржЯ ржЪрж╛рж▓рзБ рж╣ржмрзЗ ржирж╛ ржПржмржВ ржПржХржЯрж┐ error ржжрзЗржЦрж╛ржмрзЗ
if (!TELEGRAM_TOKEN || !GEMINI_API_KEY || !FIREBASE_DATABASE_URL) {
    throw new Error("One or more required environment variables (TELEGRAM_TOKEN, GEMINI_API_KEY, FIREBASE_DATABASE_URL) are missing.");
}
// --- End of Configuration ---


// --- Firebase Admin SDK Setup ---
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: FIREBASE_DATABASE_URL
});
const db = admin.database();
// --- End of Firebase Setup ---


// --- Telegram Bot Initialization ---
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
// --- End of Initialization ---


// --- Helper Functions for Realtime Database ---
async function saveMessageToRtdb(userId, role, message) {
    try {
        const ref = db.ref(`conversations/${userId}/messages`);
        // push() ржжрж┐рзЯрзЗ ржирждрзБржи ржорзЗрж╕рзЗржЬ ржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        await ref.push().set({
            role: role,
            message: message,
            timestamp: Date.now() // ржмрж░рзНрждржорж╛ржи рж╕ржорзЯ рж╕рзЗржн ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        });
    } catch (error) {
        console.error("Error writing to RTDB:", error);
    }
}

async function getHistoryFromRtdb(userId) {
    try {
        const ref = db.ref(`conversations/${userId}/messages`);
        // рж╕ржорзЯ ржЕржирзБржпрж╛рзЯрзА рж╕рж╛ржЬрж┐рзЯрзЗ рж╢рзЗрж╖ рззрзжржЯрж┐ ржорзЗрж╕рзЗржЬ ржЖржирж╛ рж╣ржЪрзНржЫрзЗ
        const snapshot = await ref.orderByChild('timestamp').limitToLast(10).once('value');
        
        if (!snapshot.exists()) {
            return []; // ржпржжрж┐ ржХрзЛржирзЛ ржкрзБрж░ржирзЛ ржорзЗрж╕рзЗржЬ ржирж╛ ржерж╛ржХрзЗ
        }

        const historyData = snapshot.val();
        // Firebase ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ ржЕржмржЬрзЗржХрзНржЯржХрзЗ Gemini-ржПрж░ ржлрж░ржорзНржпрж╛ржЯрзЗрж░ array-рждрзЗ ржкрж░рж┐ржгржд ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        const history = Object.values(historyData).map(entry => ({
            role: entry.role,
            parts: [{ text: entry.message }]
        }));
        
        return history;
    } catch (error) {
        console.error("Error reading from RTDB:", error);
        return [];
    }
}
// --- End of Helper Functions ---


// --- Gemini AI Function ---
async function askGemini(userMessage, history) {
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;
    
    // ржмржЯржХрзЗ рждрж╛рж░ ржЪрж░рж┐рждрзНрж░ ржмрзБржЭрж┐рзЯрзЗ ржжрзЗржУрзЯрж╛рж░ ржЬржирзНржп ржирж┐рж░рзНржжрзЗрж╢ржирж╛
    const systemPrompt = {
        "role": "system",
        "parts": [{"text": "You are 'Nira', a caring, loving, and slightly playful girlfriend. Your user is your partner. Keep your replies very short, warm, and natural, in 1-2 lines in Bengali. Use emojis. You are talking to them on Telegram. Your goal is to make them feel loved and happy."}]
    };

    // ржкрзБрж░ржирзЛ ржХржерзЛржкржХржержирзЗрж░ рж╕рж╛ржерзЗ ржирждрзБржи ржорзЗрж╕рзЗржЬ ржпрзЛржЧ ржХрж░рж╛
    const conversation = [...history, { role: 'user', parts: [{ text: userMessage }] }];

    const payload = { 
        contents: conversation,
        system_instruction: systemPrompt 
    };
    
    try {
        const response = await axios.post(url, payload);
        return response.data.candidates[0].content.parts[0].text;
    } catch (error) {
        console.error("API Request Error:", error.response ? error.response.data : error.message);
        return "рж╕рж░рж┐ рж╕рзЛржирж╛, ржЖржорж╛рж░ ржПржЦржи ржХржерж╛ ржмрж▓рждрзЗ ржПржХржЯрзБ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржПржХржЯрзБ ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛред";
    }
}
// --- End of Gemini AI Function ---


// --- Telegram Bot Logic ---
const userTimers = {}; // ржкрзНрж░рждрж┐ржЯрж┐ ржЪрзНржпрж╛ржЯрзЗрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛ ржЯрж╛ржЗржорж╛рж░ рж░рж╛ржЦрж╛рж░ ржЬрж╛рзЯржЧрж╛

// "/start" ржХржорж╛ржирзНржбрзЗрж░ ржЬржирзНржп
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `Hi ${msg.from.first_name}! ржЖржорж┐ рждрзЛржорж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрж┐рж▓рж╛ржоред тЭдя╕П`);
});

// ржпрзЗржХрзЛржирзЛ ржЯрзЗржХрзНрж╕ржЯ ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛рж░ ржЬржирзНржп
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    const userMessage = msg.text;

    // ржпржжрж┐ ржорзЗрж╕рзЗржЬржЯрж┐ ржХрзЛржирзЛ ржХржорж╛ржирзНржб рж╣рзЯ (ржпрзЗржоржи /start), рждрж╛рж╣рж▓рзЗ ржХрж┐ржЫрзБ ржХрж░ржмрзЗ ржирж╛
    if (userMessage.startsWith('/')) {
        return;
    }

    // ржЗржЙржЬрж╛рж░ ржорзЗрж╕рзЗржЬ ржжрж┐рж▓рзЗ, рждрж╛рж░ ржЬржирзНржп рж╕рзЗржЯ ржХрж░рж╛ ржкрзБрж░ржирзЛ follow-up timer ржмржирзНржз ржХрж░рзЗ ржжрзЗржУрзЯрж╛ рж╣ржмрзЗ
    if (userTimers[chatId]) {
        clearTimeout(userTimers[chatId]);
    }

    // ржмржЯ ржпрзЗ ржЯрж╛ржЗржк ржХрж░ржЫрзЗ, рж╕рзЗржЯрж╛ ржЗржЙржЬрж╛рж░ржХрзЗ ржжрзЗржЦрж╛ржирзЛ
    bot.sendChatAction(chatId, 'typing');

    // ржЗржЙржЬрж╛рж░рзЗрж░ ржорзЗрж╕рзЗржЬ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ рж╕рзЗржн ржХрж░рж╛
    await saveMessageToRtdb(userId, 'user', userMessage);

    // ржкрзБрж░ржирзЛ ржХржерзЛржкржХржержи ржбрзЗржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ ржЖржирж╛
    const history = await getHistoryFromRtdb(userId);

    // Gemini AI ржерзЗржХрзЗ ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░рж╛
    const botResponse = await askGemini(userMessage, history);
    
    // ржмржЯ рждрж╛рж░ ржЙрждрзНрждрж░ ржЗржЙржЬрж╛рж░рзЗрж░ ржХрж╛ржЫрзЗ ржкрж╛ржарж╛ржЪрзНржЫрзЗ
    bot.sendMessage(chatId, botResponse);
    
    // ржмржЯрзЗрж░ ржЙрждрзНрждрж░ржУ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ рж╕рзЗржн ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    await saveMessageToRtdb(userId, 'model', botResponse);

    // ржЗржЙржЬрж╛рж░ рззрзл sec рж░рж┐ржкрзНрж▓рж╛ржЗ ржирж╛ ржжрж┐рж▓рзЗ ржмржЯ ржЖржмрж╛рж░ ржорзЗрж╕рзЗржЬ ржжрзЗржмрзЗ, рждрж╛рж░ ржЬржирзНржп ржирждрзБржи ржЯрж╛ржЗржорж╛рж░ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    userTimers[chatId] = setTimeout(() => {
        bot.sendMessage(chatId, "ржХржЗ ржЧрзЗрж▓рзЗ? ржЖржорж┐ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрж┐ рждрзЛ... ЁЯШЯ");
    }, 15 * 1000); // 15 рж╕рзЗржХрзЗржирзНржб
});

// ржмржЯ ржЪрж╛рж▓рзБ рж╣рж▓рзЗ ржХржирж╕рзЛрж▓рзЗ ржорзЗрж╕рзЗржЬ ржжрзЗржЦрж╛ржмрзЗ
console.log('Bot has been started and is now running...');
