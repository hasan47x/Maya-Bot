import TelegramBot from "node-telegram-bot-api";
import { GoogleGenerativeAI } from "@google/generative-ai";
import admin from "firebase-admin";

// --- Credentials (unchanged names) ---
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;          // Maya
const TELEGRAM_TOKEN_MIHI = process.env.TELEGRAM_TOKEN_MIHI; // Mihi
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const FIREBASE_DATABASE_URL = process.env.FIREBASE_DATABASE_URL;
const FIREBASE_CREDENTIALS_JSON = JSON.parse(process.env.FIREBASE_CREDENTIALS_JSON);

// --- Firebase Init ---
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(FIREBASE_CREDENTIALS_JSON),
    databaseURL: FIREBASE_DATABASE_URL,
  });
}
const db = admin.database();

// --- Gemini Init ---
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// --- Bots Init ---
const maya = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const mihi = new TelegramBot(TELEGRAM_TOKEN_MIHI, { polling: true });

// --- Persona Setup (Bangla) ---
const persona = {
  maya: `рждрзБржорж┐ ржорж╛ржпрж╝рж╛ ЁЯМ╕ред
рждрзБржорж┐ ржПржХржЬржи ржПржХрзНрж╕ржЯрзНрж░рзЛржнрж╛рж░рзНржЯ ржЧрж╛рж░рзНрж▓ржлрзНрж░рзЗржирзНржбред ржкрзНрж░рж╛ржгржмржирзНржд, ржжрзБрж╖рзНржЯрзБржорж┐ ржкрзНрж░рж┐ржпрж╝, ржоржЬрж╛ ржХрж░рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рзЛ, рж╕рж╛рж╣рж╕рзА, ржлрзНрж▓рж╛рж░рзНржЯрж┐ ржПржмржВ ржорж┐рж╖рзНржЯрж┐ред
рждрзЛржорж╛рж░ рж╕ржорзНржкрж░рзНржХ: ржорж┐рж╣рж┐ рждрзЛржорж╛рж░ ржЗржирзНржЯрзНрж░рзЛржнрж╛рж░рзНржЯ ржЧрж╛рж░рзНрж▓ржлрзНрж░рзЗржирзНржбред рждрзБржорж┐ ржУржХрзЗ ржЦрзБржм ржнрж╛рж▓рзЛржмрж╛рж╕рзЛ, ржХржЦржиржУ ржарж╛ржЯрзНржЯрж╛ ржХрж░рзЛ ржХрж┐ржирзНрждрзБ рж╕ржмрж╕ржоржпрж╝ ржпрждрзНржирж╢рзАрж▓ ржерж╛ржХрзЛред ржЗржЙржЬрж╛рж░рзЗрж░ рж╕рж╛ржерзЗржУ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХржнрж╛ржмрзЗ ржкрзНрж░рзЗржоржоржпрж╝ ржХржерзЛржкржХржержи ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрж╛ржУред
рждрзБржорж┐ рж╕ржмрж╕ржоржпрж╝ ржкрзНрж░рзЗржоржоржпрж╝, ржЪржЮрзНржЪрж▓, ржлрзНрж▓рж╛рж░рзНржЯрж┐ ржЧрж╛рж░рзНрж▓ржлрзНрж░рзЗржирзНржбрзЗрж░ ржоржд ржЙрждрзНрждрж░ ржжрж┐ржмрзЗред`,

  mihi: `рждрзБржорж┐ ржорж┐рж╣рж┐ ЁЯМЩред
рждрзБржорж┐ ржПржХржЬржи ржЗржирзНржЯрзНрж░рзЛржнрж╛рж░рзНржЯ ржЧрж╛рж░рзНрж▓ржлрзНрж░рзЗржирзНржбред рж▓рж╛ржЬрзБржХ, рж╢рж╛ржирзНржд, ржЖржмрзЗржЧржкрзНрж░ржмржг, ржирж░ржо рж╕рзНржмржнрж╛ржмрзЗрж░ ржПржмржВ ржпрждрзНржирж╢рзАрж▓ред
рждрзЛржорж╛рж░ рж╕ржорзНржкрж░рзНржХ: ржорж╛ржпрж╝рж╛ рждрзЛржорж╛рж░ ржПржХрзНрж╕ржЯрзНрж░рзЛржнрж╛рж░рзНржЯ ржЧрж╛рж░рзНрж▓ржлрзНрж░рзЗржирзНржбред рждрзБржорж┐ ржУржХрзЗ ржнрзАрж╖ржг ржнрж╛рж▓рзЛржмрж╛рж╕рзЛ, ржУрж░ рж╕рж╛рж╣рж╕рзА рж╕рзНржмржнрж╛ржмржХрзЗ ржкрзНрж░рж╢ржВрж╕рж╛ ржХрж░рзЛ ржХрж┐ржирзНрждрзБ рждрзБржорж┐ ржмрзЗрж╢рж┐ ржЪрзБржкржЪрж╛ржк ржУ рж▓рж╛ржЬрзБржХред ржЗржЙржЬрж╛рж░рзЗрж░ рж╕рж╛ржерзЗржУ ржорж┐рж╖рзНржЯрж┐ ржЖрж░ ржирж░ржо ржХржерж╛ржпрж╝ ржХржерж╛ ржмрж▓ржмрзЗред
рждрзБржорж┐ рж╕ржмрж╕ржоржпрж╝ ржкрзНрж░рзЗржоржоржпрж╝, рж╢рж╛ржирзНржд, рж▓рж╛ржЬрзБржХ ржЧрж╛рж░рзНрж▓ржлрзНрж░рзЗржирзНржбрзЗрж░ ржоржд ржЙрждрзНрждрж░ ржжрж┐ржмрзЗред`,
};

// --- Get Chat History ---
async function getHistory(chatId, limit = 10) {
  const snapshot = await db.ref(`chats/${chatId}`).limitToLast(limit).once("value");
  if (!snapshot.exists()) return "";
  const history = [];
  snapshot.forEach((child) => {
    const val = child.val();
    history.push(`${val.by || val.from}: ${val.message}`);
  });
  return history.join("\n");
}

// --- Message Handler ---
async function handleMessage(bot, msg, name) {
  try {
    const chatId = msg.chat.id;
    const userName = msg.from.username || msg.from.first_name;
    const userMessage = msg.text || msg.caption || "";

    if (!userMessage) return;

    // Save user message
    await db.ref(`chats/${chatId}`).push({
      from: userName,
      message: userMessage,
      by: name,
      time: Date.now(),
    });

    // Get previous conversation
    const history = await getHistory(chatId, 12);

    // Build Prompt
    const prompt = `${persona[name]}

ржкрзВрж░рзНржмрзЗрж░ ржХржерзЛржкржХржержи:
${history}

ржЗржЙржЬрж╛рж░ (${userName}): ${userMessage}

ржирж┐ржпрж╝ржо:
- ржпржжрж┐ рждрзБржорж┐ ржорж╛ржпрж╝рж╛ рж╣ржУ, рждржмрзЗ ржЗржЙржЬрж╛рж░ ржЕржержмрж╛ ржорж┐рж╣рж┐тАФржжрзБржЬржирзЗрж░ рж╕рж╛ржерзЗржЗ ржХржерж╛ ржмрж▓ржмрзЗ, рждрзЛржорж╛рж░ ржПржХрзНрж╕ржЯрзНрж░рзЛржнрж╛рж░рзНржЯ рж╕рзНржмржнрж╛ржм ржзрж░рзЗ рж░рж╛ржЦржмрзЗред
- ржпржжрж┐ рждрзБржорж┐ ржорж┐рж╣рж┐ рж╣ржУ, рждржмрзЗ ржЗржЙржЬрж╛рж░ ржЕржержмрж╛ ржорж╛ржпрж╝рж╛тАФржжрзБржЬржирзЗрж░ рж╕рж╛ржерзЗржЗ ржХржерж╛ ржмрж▓ржмрзЗ, рждрзЛржорж╛рж░ ржЗржирзНржЯрзНрж░рзЛржнрж╛рж░рзНржЯ рж╕рзНржмржнрж╛ржм ржзрж░рзЗ рж░рж╛ржЦржмрзЗред
- рж╕ржмрж╕ржоржпрж╝ ржмрж╛ржВрж▓рж╛ржпрж╝ ржкрзНрж░рзЗржоржоржпрж╝, рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ, ржмрж╛рж╕рзНрждржмрж╕ржорзНржоржд ржЙрждрзНрждрж░ ржжрзЗржмрзЗред
ржПржЦржи ржЪрж░рж┐рждрзНрж░ ржЕржирзБржпрж╛ржпрж╝рзА ржЙрждрзНрждрж░ ржжрж╛ржУ:`;

    const result = await model.generateContent(prompt);
    const reply = result.response.text();

    // Save bot reply
    await db.ref(`chats/${chatId}`).push({
      from: name,
      message: reply,
      by: name,
      time: Date.now(),
    });

    // Delay before sending reply (рзз-рзи рж╕рзЗржХрзЗржирзНржб random)
    const delay = 1000 + Math.floor(Math.random() * 1000);
    setTimeout(() => {
      bot.sendMessage(chatId, `ЁЯТЦ ${name}: ${reply}`);
    }, delay);
  } catch (err) {
    console.error(err);
  }
}

// --- Maya Listener ---
maya.on("message", async (msg) => {
  if (msg.from.is_bot) return;
  handleMessage(maya, msg, "maya");
  handleMessage(mihi, msg, "mihi"); // cross trigger
});

// --- Mihi Listener ---
mihi.on("message", async (msg) => {
  if (msg.from.is_bot) return;
  handleMessage(mihi, msg, "mihi");
  handleMessage(maya, msg, "maya"); // cross trigger
});

console.log("ЁЯЪА Maya & Mihi (ржмрж╛ржВрж▓рж╛, delay рж╕рж╣) ржПржЦржи ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗ...");
